scalar Date;
scalar DateTime;

type Book{
  bookId:ID!
  bookNo:String
  name:String
  isActive:Boolean
  author:Author
  dateAdded:DateTime
}

type Author{
  id:ID!
  name:String
  profileImg:String
}

type Role{
  id:ID!
  name:RoleName
}

enum RoleName{
  ADMIN
  USER
  DEVELOPER
}

type Status{
    id:ID!
    name:EStatus
}

enum EStatus{
    PENDING
    IN_PROGRESS
    RESOLVED
    CLOSED
    DROPPED
}

type Ticket{
    ticketId:ID
    ticketNo:String
    dateAdded:Date
    reporter:Author
    title:String
    description:String
    dateClosed:Date
    status:Status
    support:[Support]
}

type Support{
    id:ID
    ticket:Ticket
    dateTaken:DateTime
    developer:Author
    result:String
    description:String
    isActive:Boolean
}

type TicketAttachment{
  id:ID
  ticket:Ticket
  name:String
}

type Query {
  getAllBooks:[Book]!
  getAllAuthors:[Author]!
  getBook(id:ID!):Book
  getAllBooksForAuthor(id:ID!):[Book]
  getAllRole:[Role]
  getRole(name:RoleName!):Role

  getAllSupportsForDeveloper(authorId:ID!):[Support]

  getAllTickets:[Ticket]
  getTicket(ticketId:ID!):Ticket
  getAllTicketsForUser(authorId:ID!):[Ticket]

  getAllTicketAttachment:[TicketAttachment]
}

type Mutation{
  addBook(name:String!,id:ID!):Book
  editBook(id:ID!,name:String!):Book
  deleteBook(id:ID!):Boolean
  addAuthor(name:String!):Author
}